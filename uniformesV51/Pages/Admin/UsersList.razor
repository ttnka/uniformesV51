

@inherits UsersListBase
@inject NotificationService NS
@using uniformesV51.Model

<div class="form-grup row">
    <div class="col-sm-9">
        <div class="nav-item px-3">
            
            <RadzenButton Icon="refresh" style="margin-bottom: 10px" ButtonStyle="ButtonStyle.Info"
                          Click="@LeerUsers" />
        </div>
    </div>

    <div class="col-sm-3">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href=@($"/")>
                <span class="oi oi-caret-left" aria-hidden="true"></span> Regresar a Inicio
            </NavLink>
        </div>
    </div>
</div>

@if(LosUsers != null)
{
    <RadzenCard>       
        <RadzenDataGrid @ref="UsersGrid" AllowFiltering="true" AllowPaging="true" PageSize="50" 
                AllowSorting="true" AllowColumnResize="true"
                ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                EditMode="DataGridEditMode.Single" 
                Data="@LosUsers" TItem="Z110_Usuarios" RowUpdate="@OnUpdateRow" 
                RowCreate="@OnCreateRow" >

                <Columns>

                <RadzenDataGridColumn TItem="Z110_Usuarios" Title="Id" Filterable="false"
                                  Width="50px">
                    <Template Context="datos">
                        @(LosUsers.IndexOf(datos) + 1)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Z110_Usuarios" Property="Paterno" Title="Nombre" Filterable="true"
                                  Width="250px">
                    <Template Context="datos">
                        @datos.Nombre @datos.Paterno @datos.Materno
                    </Template>
                    <EditTemplate Context="datos">
                        <RadzenTextBox Name="Nombre" @bind-Value="datos.Nombre" Style="width: 90%" /> <br>
                        <RadzenLengthValidator Component="Nombre" Min="1" Max="25"
                                           Text="El Nombre es Requerido" /> <br />
                        <RadzenTextBox Name="Paterno" @bind-Value="datos.Paterno" Style="width: 90%" /> <br>
                        <RadzenLengthValidator Component="Paterno" Min="1" Max="25"
                                           Text="El Paterno es Requerido" /> <br />
                        <RadzenTextBox Name="Materno" @bind-Value="datos.Materno" Style="width: 90%" /> <br>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Z110_Usuarios" Property="OldEmail" Title="Email" 
                                Filterable="true" Width="150px" />
                <RadzenDataGridColumn TItem="Z110_Usuarios" Title="Nivel" Filterable="false"
                                  Width="150px">
                    <Template Context="datos">
                        @datos.OldEmail
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Z110_Usuarios" Property="Nivel" Title="Nivel"
                                  Filterable="false" Resizable="true" Width="180px">
                    <Template Context="datos">
                        @if(!string.IsNullOrEmpty(
                            @LosNivelesTitulos.FirstOrDefault(x=>x.Key == datos.Nivel).Value))
                        {
                            <label>@LosNivelesTitulos.FirstOrDefault(x=>x.Key == datos.Nivel).Value</label>
                        }
                        else
                        {
                            <label>No tengo Info</label>
                        }
                    </Template>
                    <EditTemplate Context="datos">
                        <RadzenDropDown Name="Nivel" Data=@LosNiveles @bind-Value=@datos.Nivel
                                    ValueProperty="Key" TextProperty="Value" AllowClear="true"
                                    AllowFiltering="false" Style="width: 100%;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Z110_Usuarios" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                    <Template Context="datos">
                        @if (datos.Nivel >= ElUser.Nivel && datos.UserId != ElUser.UserId)
                        {
                            <label>.</label>
                        }
                        else
                        {
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                  Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                        }
                        @if (datos.Status)
                        {
                            <b>Activo</b>
                        }
                        else
                        {
                            <b>Suspendido</b>
                        }
                    </Template>

                    <EditTemplate Context="datos">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />

                    @if (datos.Estado != 3)
                    {
                        <label>Borrar este registro? </label>
                        <label>Si</label>
                        <RadzenSwitch @bind-Value=@datos.Status Name="Status" />
                        <label>No!</label>
                    }
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                    </EditTemplate>

                </RadzenDataGridColumn>


            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
}
else
{
    <div class="spinner"></div>
}


@code {
    Z110_Usuarios UserToInser = new();

    async Task EditRow(Z110_Usuarios user)
    {
        await UsersGrid!.EditRow(user);
        Editando = !Editando;
    }
    async void OnUpdateRow(Z110_Usuarios user)
    {
        if (user == UserToInser) UserToInser = null!;

        Editando = !Editando;
        await Servicio("Update", user);

        ShowNotification(ElMsn("info", "Actualizo",
            $"Se actualizo la info de {user.OldEmail}", 0));
        string nivel = LosNivelesTitulos.FirstOrDefault(x => x.Key == user.Nivel).Value;
        string texto = $"Usuarios, Actualizo un registro {user.OldEmail}";
        texto += $"{user.Nombre} {user.Paterno} {user.Materno} nivel {nivel} ";
        var bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, texto, false);
        await BitacoraC.InvokeAsync(bitaTemp);
    }

    async Task SaveRow(Z110_Usuarios user)
    {
        await UsersGrid!.UpdateRow(user);
    }
    void CancelEdit(Z110_Usuarios user)
    {
        if (user == UserToInser) UserToInser = null!;
        Editando = !Editando;
        UsersGrid!.CancelEditRow(user);
    }
    async Task InsertRow()
    {
        UserToInser = new Z110_Usuarios();
        UserToInser.OrgId = Guid.NewGuid().ToString();
        UserToInser.Estado = 3;
        Editando = !Editando;
        await Task.Delay(1);
        //await OrgGrid!.InsertRow(UserToInser);

    }
    async void OnCreateRow(Z110_Usuarios user)
    {
        if (user == UserToInser) UserToInser = null;
        user.Estado = 2;
        Editando = !Editando;

        var resultado = await Servicio("Insert", user);
        if (resultado)
        {
            ShowNotification(ElMsn("Ok", "Actualizo",
            $"Se actualizo la info de {user.OldEmail}", 0));
            string texto = $"Usuarios, Creo una nuevo usuario {user.OldEmail}";
            texto += $"{user.Nombre} {user.Paterno}";
            var bitaTemp = MyFunc.MakeBitacora(ElUser.UserId, ElUser.OrgId, texto, false);
            await BitacoraC.InvokeAsync(bitaTemp);
        }
    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}
